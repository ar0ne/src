
// various 1 and 4
/*
ЗАДАЧА 1 (индивидуальное задание).

Объект автоматизации – предметная область типа “Неарифметический класс”, например, СТУДЕНТ, ГРУППА, ТОВАР, ПРАЙС, КНИГА, РЕЙС, МАРШРУТ и т.п.
Для заданной предметной области следует разработать класс. Он должен в итоговом варианте со-держать следующие члены.
1. 2-3 свойства-атрибута (один массивного типа).
2. Три конструктора (по одному каждого типа).
3. Методы, достаточные для установки и получения свойств объекта класса (например, TO_SET(), TO_SHOW()  и т.п.).
4. Три перегруженных оператора (операторы типа “=”, а также двуместный и одноместный операто-ры).
ЗАДАЧА 2 (индивидуальное задание).
Объект автоматизации – предметная область типа “Арифметический класс”, например, класс для обработки и хранения трех значений целого типа;
класс для обработки и хранения одного значения вещественного и двух значений целого типа;
класс для обработки и хранения значения комплексного  типа; класс для обработки и хранения значений вектора и т.п.
Для заданной предметной области следует разработать класс аналогично ЗАДАЧЕ 2.
*/

#include <iostream>
#include <locale.h>
#include <string.h>
using namespace std;

class STUDENT{
	public:
		STUDENT(char [] = "Someone", int = 5 , float = 7.1 );
		void TO_SHOW(void) const;
		void TO_SET(char *, int , float );
	private:
		int num; //номер в группе
		float mid_mark; //средний балл
		char name[20]; // имя студента
};

void STUDENT::TO_SET(char Name[20], int Num, float Mid_mark){

	if(strcmp(Name,name) != 0 ) {
		strcpy(name,Name);
	}
	num = (Num != num ) ? Num : 10;
	mid_mark = (Mid_mark != mid_mark) ?  Mid_mark : 10.0 ;

}

void STUDENT::TO_SHOW(void) const {
	cout<<"Имя: "<<name<<'\n';
	cout<<"Номер в группе: "<<num<<'\n';
	cout<<"Средний балл: "<<mid_mark<<"\n\n";
}



STUDENT::STUDENT(char *name, int num, float mid_mark){
	TO_SET(name, num, mid_mark);
}

/*
int main(){
	setlocale(0,"");
	STUDENT iam("Serg", 19, 8.5),
			s1,
			s2("Lesha", 12);
	iam.TO_SHOW();
	s1.TO_SHOW();
	s2.TO_SHOW();
return 0;
}
*/
